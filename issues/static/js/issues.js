// Generated by CoffeeScript 1.6.3
(function() {
  var AppRouter, Comment, CommentCollection, CommentListItemView, CommentListView, DropdownLabelListItemView, DropdownLabelListView, InlineLabelListItemView, Issue, IssueCollection, IssueListItemView, IssueListView, IssueView, Label, LabelCollection, LabelContextMenu, LabelListItemView, NewIssueView, OverlayPanel, Panel, app, bestContrastingColour, defer, hex2rgb, loadPopup, lumdiff, templatify, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Backbone.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    CollectionView.prototype.tagName = 'ol';

    function CollectionView(options) {
      this.children = {};
      if (options.childView != null) {
        this.childView = options.childView;
      }
      if (this.childView == null) {
        console.error('childView option is missing');
      }
      CollectionView.__super__.constructor.call(this, options);
    }

    CollectionView.prototype.initialize = function() {
      this.listenTo(this.model, 'add', this.addChildView);
      return this.listenTo(this.model, 'remove', this.removeChildModel);
    };

    CollectionView.prototype.createChildView = function(model) {
      return new this.childView({
        model: model
      });
    };

    CollectionView.prototype.appendChildView = function(el) {
      return this.$el.append(el);
    };

    CollectionView.prototype.addChildView = function(childModel) {
      var view;
      view = this.createChildView(childModel);
      view.render();
      this.children[childModel.cid] = view;
      return this.appendChildView(view.el);
    };

    CollectionView.prototype.removeChildModel = function(childModel) {
      if (this.children[childModel.cid] == null) {
        return false;
      }
      this.children[childModel.cid].remove();
      return delete this.children[childModel.cid];
    };

    CollectionView.prototype.render = function() {
      var model, _i, _len, _ref, _results;
      this.clear();
      _ref = this.model.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (this.children[model.cid] == null) {
          _results.push(this.addChildView(model));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CollectionView.prototype.remove = function() {
      this.clear();
      return CollectionView.__super__.remove.call(this);
    };

    CollectionView.prototype.clear = function() {
      var child, cid, _ref;
      _ref = this.children;
      for (cid in _ref) {
        child = _ref[cid];
        child.remove();
      }
      return this.children = {};
    };

    return CollectionView;

  })(Backbone.View);

  Backbone.CollectionSubset = (function() {
    CollectionSubset.extend = Backbone.Model.extend;

    _.extend(CollectionSubset.prototype, Backbone.Events);

    function CollectionSubset(options) {
      if (options == null) {
        options = {};
      }
      options = _.defaults(options, {
        refresh: true,
        triggers: null,
        filter: function() {
          return true;
        },
        name: null,
        child: null,
        parent: null
      });
      this.triggers = options.triggers ? options.triggers.split(' ') : [];
      if (!options.child) {
        options.child = new options.parent.constructor;
      }
      this.setParent(options.parent);
      this.setChild(options.child);
      this.setFilter(options.filter);
      if (options.model) {
        this.child.model = options.model;
      }
      if (options.refresh) {
        this.refresh();
      }
      this.name = options.name;
    }

    CollectionSubset.prototype.setParent = function(collection) {
      var _ref,
        _this = this;
      if ((_ref = this.parent) != null) {
        _ref.off(null, null, this);
      }
      this.parent = collection;
      this.parent.on('add', this._onParentAdd, this);
      this.parent.on('remove', this._onParentRemove, this);
      this.parent.on('reset', this._onParentReset, this);
      this.parent.on('change', this._onParentChange, this);
      this.parent.on('dispose', this.dispose, this);
      this.parent.on('loading', (function() {
        return _this.child.trigger('loading');
      }), this);
      return this.parent.on('ready', (function() {
        return _this.child.trigger('ready');
      }), this);
    };

    CollectionSubset.prototype.setChild = function(collection) {
      var _ref;
      if ((_ref = this.child) != null) {
        _ref.off(null, null, this);
      }
      this.child = collection;
      this.child.on('add', this._onChildAdd, this);
      this.child.on('reset', this._onChildReset, this);
      this.child.on('dispose', this.dispose, this);
      this.child.superset = this.parent;
      this.child.filterer = this;
      this.child.url = this.parent.url;
      return this.child.model = this.parent.model;
    };

    CollectionSubset.prototype.setFilter = function(fn) {
      var filter;
      filter = function(model) {
        var matchesFilter, matchesParentFilter;
        matchesFilter = fn.call(this, model);
        matchesParentFilter = this.parent.filterer ? this.parent.filterer.filter(model) : true;
        return matchesFilter && matchesParentFilter;
      };
      return this.filter = _.bind(filter, this);
    };

    CollectionSubset.prototype.refresh = function(options) {
      var models;
      if (options == null) {
        options = {};
      }
      models = this.parent.filter(this.filter);
      this.child.reset(models, {
        subset: this
      });
      return this.child.trigger('refresh');
    };

    CollectionSubset.prototype._replaceChildModel = function(parentModel) {
      var childModel, index;
      childModel = this._getByCid(this.child, parentModel.cid);
      if (childModel === parentModel) {
        return;
      }
      if (_.isUndefined(childModel)) {
        return this.child.add(parentModel, {
          subset: this
        });
      } else {
        index = this.child.indexOf(childModel);
        this.child.remove(childModel);
        return this.child.add(parentModel, {
          at: index,
          subset: this
        });
      }
    };

    CollectionSubset.prototype._onParentAdd = function(model, collection, options) {
      if (options && options.subset === this) {
        return;
      }
      if (this.filter(model)) {
        return this._replaceChildModel(model);
      }
    };

    CollectionSubset.prototype._onParentRemove = function(model, collection, options) {
      return this.child.remove(model, options);
    };

    CollectionSubset.prototype._onParentReset = function(collection, options) {
      return this.refresh();
    };

    CollectionSubset.prototype._onParentChange = function(model, changes) {
      if (!this.triggerMatched(model)) {
        return;
      }
      if (this.filter(model)) {
        return this.child.add(model);
      } else {
        return this.child.remove(model);
      }
    };

    CollectionSubset.prototype._onChildAdd = function(model, collection, options) {
      var parentModel;
      if (options && options.subset === this) {
        return;
      }
      this.parent.add(model);
      parentModel = this._getByCid(this.parent, model.cid);
      if (!parentModel) {
        return;
      }
      if (this.filter(parentModel)) {
        return this._replaceChildModel(parentModel);
      } else {
        return this.child.remove(model);
      }
    };

    CollectionSubset.prototype._onChildReset = function(collection, options) {
      if (options && options.subset === this) {
        return;
      }
      this.parent.add(this.child.models);
      return this.refresh();
    };

    CollectionSubset.prototype._getByCid = function(model, cid) {
      var fn;
      fn = model.getByCid || model.get;
      return fn.apply(model, [cid]);
    };

    CollectionSubset.prototype.triggerMatched = function(model) {
      var changedAttrs;
      if (this.triggers.length === 0) {
        return true;
      }
      if (!model.hasChanged()) {
        return false;
      }
      changedAttrs = _.keys(model.changedAttributes());
      return _.intersection(this.triggers, changedAttrs).length > 0;
    };

    CollectionSubset.prototype.dispose = function() {
      var prop, _base, _i, _len, _ref;
      if (this.disposed) {
        return;
      }
      this.trigger('dispose', this);
      this.parent.off(null, null, this);
      this.child.off(null, null, this);
      if (typeof (_base = this.child).dispose === "function") {
        _base.dispose();
      }
      this.off();
      _ref = ['parent', 'child', 'options'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        delete this[prop];
      }
      return this.disposed = true;
    };

    return CollectionSubset;

  })();

  Backbone.Collection.prototype.subcollection = function(options) {
    var subset;
    if (options == null) {
      options = {};
    }
    _.defaults(options, {
      child: new this.constructor,
      parent: this
    });
    subset = new Backbone.CollectionSubset(options);
    return subset.child;
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Backbone.CollectionSubset;
  }

  hex2rgb = function(hex) {
    var colour;
    if (hex.charAt(0 === '#')) {
      hex = hex.substring(1, 7);
    }
    return colour = {
      r: parseInt(hex.substring(0, 2), 16),
      g: parseInt(hex.substring(2, 4), 16),
      b: parseInt(hex.substring(4, 6), 16)
    };
  };

  lumdiff = function(c1, c2) {
    var l1, l2;
    l1 = (0.2126 * Math.pow(c1.r / 255, 2.2)) + (0.7152 * Math.pow(c1.g / 255, 2.2)) + (0.0722 * Math.pow(c1.b / 255, 2.2));
    l2 = (0.2126 * Math.pow(c2.r / 255, 2.2)) + (0.7152 * Math.pow(c2.g / 255, 2.2)) + (0.0722 * Math.pow(c2.b / 255, 2.2));
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  bestContrastingColour = function(hex) {
    var bc, black, wc, white;
    black = '#000000';
    white = '#ffffff';
    bc = lumdiff(hex2rgb(black), hex2rgb(hex));
    wc = lumdiff(hex2rgb(white), hex2rgb(hex));
    if (bc > wc) {
      return black;
    } else {
      return white;
    }
  };

  Issue = (function(_super) {
    __extends(Issue, _super);

    function Issue() {
      _ref = Issue.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Issue.prototype.defaults = {
      id: null,
      title: '',
      description: '',
      owner: null,
      "public": false,
      deadline: null,
      added: null,
      modified: null,
      completed: null,
      last_read: null,
      labels: [],
      comments: []
    };

    Issue.prototype.urlRoot = '/api/issues';

    Issue.prototype.initialize = function() {
      var label_ids, labels,
        _this = this;
      this.comments = new CommentCollection(this.get('comments'), {
        issue: this,
        url: function() {
          return "" + (_this.url()) + "/comments";
        }
      });
      label_ids = _.pluck(this.get('labels'), 'id');
      labels = window.app.labelCollection.filter(function(label) {
        return _.contains(label_ids, label.get('id'));
      });
      return this.labels = new LabelCollection(labels, {
        url: function() {
          return "" + (_this.url()) + "/labels";
        }
      });
    };

    Issue.prototype.parse = function(resp, options) {
      if (resp.last_read != null) {
        resp.last_read = new Date(resp.last_read);
      }
      resp.modified = new Date(resp.modified);
      return resp;
    };

    Issue.prototype.is_read = function() {
      return (this.get('last_read')) !== null && (this.get('last_read')) >= (this.get('modified'));
    };

    Issue.prototype.mark_read = function() {
      if (app.user === null) {
        return;
      }
      this.set('last_read', new Date());
      return jQuery.ajax("/api/issues/" + (this.get('id')) + "/read", {
        cache: false,
        global: false,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify({
          last_read: this.get('last_read')
        })
      });
    };

    return Issue;

  })(Backbone.Model);

  IssueCollection = (function(_super) {
    __extends(IssueCollection, _super);

    function IssueCollection() {
      _ref1 = IssueCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    IssueCollection.prototype.model = Issue;

    return IssueCollection;

  })(Backbone.Collection);

  Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      _ref2 = Comment.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Comment.prototype.validate = function(attr, options) {
      if ((jQuery.trim(attr.text)) === '') {
        return 'The comment has no text';
      }
    };

    Comment.prototype.parse = function(resp, options) {
      resp.time = new Date(resp.time);
      return resp;
    };

    Comment.prototype.is_read = function() {
      var last_read;
      last_read = this.collection.issue.get('last_read');
      return last_read !== null && last_read >= this.get('time');
    };

    return Comment;

  })(Backbone.Model);

  CommentCollection = (function(_super) {
    __extends(CommentCollection, _super);

    function CommentCollection() {
      _ref3 = CommentCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    CommentCollection.prototype.model = Comment;

    CommentCollection.prototype.initialize = function(models, options) {
      return this.issue = options.issue;
    };

    return CommentCollection;

  })(Backbone.Collection);

  Label = (function(_super) {
    __extends(Label, _super);

    function Label() {
      _ref4 = Label.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Label.prototype.defaults = {
      id: null,
      name: '',
      colour: null
    };

    Label.prototype.urlRoot = '/api/labels';

    return Label;

  })(Backbone.Model);

  LabelCollection = (function(_super) {
    __extends(LabelCollection, _super);

    function LabelCollection() {
      _ref5 = LabelCollection.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    LabelCollection.prototype.model = Label;

    LabelCollection.prototype.isDirty = false;

    LabelCollection.prototype.initialize = function() {
      this.on('add', this.markDirty, this);
      return this.on('remove', this.markDirty, this);
    };

    LabelCollection.prototype.markDirty = function() {
      return this.isDirty = true;
    };

    LabelCollection.prototype.save = function() {
      var isDirty;
      if (this.isDirty) {
        Backbone.sync('update', this, {
          url: this.url()
        });
        return isDirty = false;
      }
    };

    return LabelCollection;

  })(Backbone.Collection);

  templatify = function(id) {
    var element;
    element = jQuery("#" + id);
    element.detach();
    element.removeAttr('id');
    return function() {
      return element.clone().get(0);
    };
  };

  IssueListItemView = (function(_super) {
    __extends(IssueListItemView, _super);

    function IssueListItemView() {
      _ref6 = IssueListItemView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    IssueListItemView.prototype.template = templatify('tpl-issue-list-item');

    IssueListItemView.prototype.initialize = function() {
      this.setElement(this.template());
      this.listenTo(this.model, 'change', this.render);
      return this.labelView = new Backbone.CollectionView({
        childView: InlineLabelListItemView,
        model: this.model.labels,
        el: this.$('.issue-labels')
      });
    };

    IssueListItemView.prototype.render = function(eventName) {
      this.$el.toggleClass('unread', !this.model.is_read());
      this.$('.issue-link').attr('href', "/issues/" + (this.model.get('id')));
      this.$('.issue-title').text(this.model.get('title'));
      this.$('.issue-description').text(this.model.strip('description'));
      this.$el.toggleClass('issue-missed-deadline', (this.model.has('deadline')) && !(this.model.get('completed')) && moment(this.model.get('deadline')).isBefore());
      this.$el.toggleClass('issue-completed', !!this.model.get('completed'));
      this.$el.toggleClass('issue-is-public', !!this.model.get('public'));
      this.$el.toggleClass('issue-is-private', !this.model.get('public'));
      return this.labelView.render();
    };

    IssueListItemView.prototype.isSelected = function() {
      return this.$('input[type=checkbox]').get(0).checked;
    };

    IssueListItemView.prototype.remove = function() {
      this.labelView.remove();
      return IssueListItemView.__super__.remove.call(this);
    };

    return IssueListItemView;

  })(Backbone.View);

  IssueListView = (function(_super) {
    __extends(IssueListView, _super);

    function IssueListView() {
      _ref7 = IssueListView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    IssueListView.prototype.childView = IssueListItemView;

    IssueListView.prototype.template = templatify('tpl-issue-list-panel');

    IssueListView.prototype.title = function() {
      return 'Issues';
    };

    IssueListView.prototype.events = {
      'click .close-issues-button': function(evt) {
        var child, cid, _ref8, _results;
        evt.preventDefault();
        _ref8 = this.children;
        _results = [];
        for (cid in _ref8) {
          child = _ref8[cid];
          if (child.isSelected()) {
            _results.push(child.model.save({
              completed: true
            }, {
              patch: true
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    IssueListView.prototype.initialize = function() {
      IssueListView.__super__.initialize.call(this);
      return this.setElement(this.template());
    };

    IssueListView.prototype.appendChildView = function(el) {
      return this.$('.issue-list').append(el);
    };

    return IssueListView;

  })(Backbone.CollectionView);

  IssueView = (function(_super) {
    __extends(IssueView, _super);

    function IssueView() {
      _ref8 = IssueView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    IssueView.prototype.template = templatify('tpl-issue-details-panel');

    IssueView.prototype.title = function() {
      return this.model.get('title');
    };

    IssueView.prototype.events = {
      'submit .comments form': function(evt) {
        evt.preventDefault();
        return this.addComment();
      },
      'keypress textarea': function(evt) {
        if (evt.keyCode === 13 && evt.ctrlKey) {
          evt.preventDefault();
          return this.addComment();
        }
      },
      'click .close-issue-button': function(evt) {
        evt.preventDefault();
        return this.model.save({
          'completed': true
        }, {
          patch: true
        });
      },
      'click .reopen-issue-button': function(evt) {
        evt.preventDefault();
        return this.model.save({
          'completed': false
        }, {
          patch: true
        });
      },
      'click .edit-issue-button': function(evt) {
        evt.preventDefault();
        return this.$el.addClass('editable');
      },
      'dblclick .issue-title': function(evt) {
        evt.preventDefault();
        return this.$el.addClass('editable');
      },
      'click .finish-editing-issue-button': function(evt) {
        evt.preventDefault();
        return this.$('.edit-issue').submit();
      },
      'submit .edit-issue': function(evt) {
        var data;
        evt.preventDefault();
        data = this.$('.edit-issue').serializeObject();
        data.deadline = data.deadline != null ? moment(data.deadline) : null;
        data["public"] = data["public"] != null;
        this.model.save(data, {
          patch: true
        });
        return this.$el.removeClass('editable');
      },
      'click .label-issue-button': function(evt) {
        return this.labelDropdownView.toggle(evt.target);
      }
    };

    IssueView.prototype.initialize = function() {
      console.assert(this.model != null, 'IssueView has no model');
      this.setElement(this.template());
      this.listenTo(this.model, 'change', this.render);
      this.commentListView = new CommentListView({
        model: this.model.comments,
        el: this.$('.comment-list')
      });
      this.labelListView = new Backbone.CollectionView({
        childView: InlineLabelListItemView,
        model: this.model.labels,
        el: this.$('.issue-labels')
      });
      this.labelDropdownView = new DropdownLabelListView({
        model: app.labelCollection,
        selected: this.model.labels,
        el: this.$('.label-dropdown')
      });
      this.$el.append(this.labelDropdownView.el);
      this.model.comments.fetch();
      return this.$el.find('.edit-issue .issue-deadline').pickadate({
        firstDay: 1,
        format: 'yyyy/mm/dd'
      });
    };

    IssueView.prototype.render = function(eventName) {
      this.$el.toggleClass('unread', !this.model.is_read());
      this.$('.read-issue .issue-title').text(this.model.get('title'));
      this.$('.read-issue .issue-description').html(this.model.get('description'));
      if (this.model.has('added')) {
        this.$('.read-issue .issue-added').text("Added " + (moment(this.model.get('added')).fromNow()) + " by " + (this.model.get('owner').name));
        this.$('.read-issue .issue-added').attr('title', moment(this.model.get('added')).calendar());
      }
      this.$('.read-issue .issue-deadline').text(this.model.has('deadline') ? "Deadline " + (moment(this.model.get('deadline')).fromNow()) : "No deadline");
      this.$('.read-issue .issue-deadline').attr('title', this.model.has('deadline') ? moment(this.model.get('deadline')).calendar() : "");
      this.$('.read-issue .issue-visibility').text(this.model.get('public') ? 'Public issue' : 'Private issue');
      this.$('.edit-issue .issue-title').val(this.model.get('title'));
      this.$('.edit-issue .issue-description').val(this.model.get('description'));
      this.$('.edit-issue .issue-deadline').val(this.model.has('deadline') ? moment(this.model.get('deadline')).format('YYYY-MM-DD') : void 0);
      this.$('.edit-issue .issue-visibility').get(0).checked = this.model.get('public');
      this.$el.toggleClass('loading', !this.model.get('added'));
      this.$el.toggleClass('issue-completed', !!this.model.get('completed'));
      this.$el.toggleClass('issue-is-public', !!this.model.get('public'));
      this.$el.toggleClass('issue-is-private', !this.model.get('public'));
      this.commentListView.render();
      this.labelListView.render();
      return this.labelDropdownView.render();
    };

    IssueView.prototype.addComment = function() {
      var data, options;
      data = {
        issue_id: this.model.get('id'),
        user: app.user,
        text: this.$('.comments form textarea[name=text]').val()
      };
      options = {
        validate: true
      };
      if (this.model.comments.create(data, options)) {
        return this.$('.comments form').get(0).reset();
      }
    };

    IssueView.prototype.remove = function() {
      this.commentListView.remove();
      this.labelListView.remove();
      this.labelDropdownView.remove();
      return IssueView.__super__.remove.call(this);
    };

    return IssueView;

  })(Backbone.View);

  NewIssueView = (function(_super) {
    __extends(NewIssueView, _super);

    function NewIssueView() {
      _ref9 = NewIssueView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    NewIssueView.prototype.template = templatify('tpl-new-issue-panel');

    NewIssueView.prototype.title = function() {
      return 'New Issue';
    };

    NewIssueView.prototype.events = {
      'submit form': function(evt) {
        var data, issue, options;
        evt.preventDefault();
        data = jQuery(evt.target).serializeObject();
        options = {
          success: function(issue) {
            return window.app.navigate("/issues/" + (issue.get('id')), true);
          }
        };
        issue = new Issue;
        if (issue.save(data, options)) {
          this.model.add(issue);
          return evt.target.reset();
        }
      }
    };

    NewIssueView.prototype.initialize = function() {
      return this.setElement(this.template());
    };

    NewIssueView.prototype.render = function() {
      var _this = this;
      return setTimeout((function() {
        return _this.$('input[name=title]').get(0).focus();
      }), 500);
    };

    return NewIssueView;

  })(Backbone.View);

  CommentListItemView = (function(_super) {
    __extends(CommentListItemView, _super);

    function CommentListItemView() {
      _ref10 = CommentListItemView.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    CommentListItemView.prototype.template = templatify('tpl-comment-list-item');

    CommentListItemView.prototype.initialize = function() {
      this.setElement(this.template());
      return this.listenTo(this.model, 'change', this.render);
    };

    CommentListItemView.prototype.render = function(eventName) {
      this.$el.toggleClass('unread', !this.model.is_read());
      this.$('time[pubdate]').text(moment(this.model.get('time')).fromNow());
      this.$('time[pubdate]').attr('title', moment(this.model.get('time')).calendar());
      this.$('.gravatar').attr('src', (this.model.get('user')).gravatar);
      this.$('.comment-text').text(this.model.get('text'));
      return this.$('.user-name').text((this.model.get('user')).name);
    };

    return CommentListItemView;

  })(Backbone.View);

  CommentListView = (function(_super) {
    __extends(CommentListView, _super);

    function CommentListView() {
      _ref11 = CommentListView.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    CommentListView.prototype.childView = CommentListItemView;

    return CommentListView;

  })(Backbone.CollectionView);

  InlineLabelListItemView = (function(_super) {
    __extends(InlineLabelListItemView, _super);

    function InlineLabelListItemView() {
      _ref12 = InlineLabelListItemView.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    InlineLabelListItemView.prototype.tagName = 'span';

    InlineLabelListItemView.prototype.initialize = function() {
      return this.listenTo(this.model, 'change', this.render);
    };

    InlineLabelListItemView.prototype.render = function() {
      if (this.model.has('colour')) {
        this.$el.css({
          'color': bestContrastingColour(this.model.get('colour')),
          'background-color': this.model.get('colour')
        });
      }
      return this.$el.text(this.model.get('name'));
    };

    return InlineLabelListItemView;

  })(Backbone.View);

  LabelListItemView = (function(_super) {
    __extends(LabelListItemView, _super);

    function LabelListItemView() {
      _ref13 = LabelListItemView.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    LabelListItemView.prototype.template = templatify('tpl-label-list-item');

    LabelListItemView.prototype.events = {
      'click .swatch': function(evt) {
        if (this.contextMenu && this.contextMenu.isVisible()) {
          return this.contextMenu.hide();
        } else {
          this.contextMenu = new LabelContextMenu({
            model: this.model
          });
          this.contextMenu.render();
          return this.contextMenu.show(evt.target);
        }
      }
    };

    LabelListItemView.prototype.initialize = function() {
      this.setElement(this.template());
      return this.listenTo(this.model, 'change', this.render);
    };

    LabelListItemView.prototype.render = function() {
      if (this.model.has('colour')) {
        this.$('.swatch').css({
          'background-color': this.model.get('colour')
        });
      }
      this.$('.label-link').attr('href', "/labels/" + (encodeURIComponent(this.model.get('name'))));
      return this.$('.label-name').text(this.model.get('name'));
    };

    return LabelListItemView;

  })(Backbone.View);

  DropdownLabelListItemView = (function(_super) {
    __extends(DropdownLabelListItemView, _super);

    function DropdownLabelListItemView() {
      _ref14 = DropdownLabelListItemView.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    DropdownLabelListItemView.prototype.template = templatify('tpl-dropdown-label-list-item');

    DropdownLabelListItemView.prototype.events = {
      'change .label-selected': function(evt) {
        if (evt.target.checked) {
          return this.selected.add(this.model);
        } else {
          return this.selected.remove(this.model);
        }
      }
    };

    DropdownLabelListItemView.prototype.initialize = function() {
      this.setElement(this.template());
      return this.listenTo(this.model, 'change', this.render);
    };

    DropdownLabelListItemView.prototype.render = function() {
      if (this.model.has('colour')) {
        this.$el.css({
          'color': bestContrastingColour(this.model.get('colour')),
          'background-color': this.model.get('colour')
        });
      }
      this.$('.label-name').text(this.model.get('name'));
      return this.$('.label-selected').attr('checked', !!this.selected.get(this.model.get('id')));
    };

    return DropdownLabelListItemView;

  })(Backbone.View);

  DropdownLabelListView = (function(_super) {
    __extends(DropdownLabelListView, _super);

    function DropdownLabelListView() {
      _ref15 = DropdownLabelListView.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    DropdownLabelListView.prototype.childView = DropdownLabelListItemView;

    DropdownLabelListView.prototype.template = templatify('tpl-dropdown-label-list');

    DropdownLabelListView.prototype.events = {
      'keyup .label-filter': function(evt) {
        var _this = this;
        if (evt.keyCode === 27) {
          if (this.filterField.val() !== '') {
            this.filterField.val('');
          } else {
            this.hide();
          }
          evt.stopPropagation();
          evt.preventDefault();
        }
        if (evt.keyCode === 13) {
          evt.preventDefault();
          this.hide();
        }
        if (evt.keyCode === 40) {
          evt.preventDefault();
          this.$('.label-list li:visible input').first().focus();
        }
        return defer(function() {
          return _this.filter(_this.filterField.val());
        });
      },
      'click .create-new-label-button': function() {
        var label;
        label = this.model.create({
          name: this.filterField.val()
        });
        if (label) {
          return this.selected.add(label);
        }
      },
      'keydown .label-list input': function(evt) {
        if (evt.keyCode === 40) {
          evt.preventDefault();
          jQuery(evt.target).closest('li').next('.visible').find('input,button').focus();
        }
        if (evt.keyCode === 38) {
          evt.preventDefault();
          jQuery(evt.target).closest('li').prev('.visible').find('input,button').focus();
        }
        if (evt.keyCode === 27) {
          evt.preventDefault();
          return this.hide();
        }
      }
    };

    DropdownLabelListView.prototype.initialize = function(options) {
      var _this = this;
      DropdownLabelListView.__super__.initialize.call(this, options);
      this.selected = options.selected;
      this.listenTo(this.selected, 'add', this.updateChildren);
      this.listenTo(this.selected, 'remove', this.updateChildren);
      this.setElement(this.template());
      this.filterField = this.$('.label-filter');
      this.createLabelButton = this.$('.create-new-label-button');
      this.blurCallback = function(evt) {
        if (_this.isVisible() && !jQuery(evt.target).isOrIsChildOf(_this.el)) {
          return _this.hide();
        }
      };
      jQuery(document).on('click', this.blurCallback);
      return this.$el.hide();
    };

    DropdownLabelListView.prototype.remove = function() {
      jQuery(document).off('click', this.blurCallback);
      return DropdownLabelListView.__super__.remove.call(this);
    };

    DropdownLabelListView.prototype.createChildView = function(model) {
      var view;
      view = DropdownLabelListView.__super__.createChildView.call(this, model);
      view.selected = this.selected;
      return view;
    };

    DropdownLabelListView.prototype.appendChildView = function(el) {
      jQuery(el).addClass('visible');
      return this.$('.label-list').append(el);
    };

    DropdownLabelListView.prototype.updateChildren = function() {
      var child, cid, _i, _len, _ref16, _results;
      _ref16 = this.children;
      _results = [];
      for (child = _i = 0, _len = _ref16.length; _i < _len; child = ++_i) {
        cid = _ref16[child];
        _results.push(child.render());
      }
      return _results;
    };

    DropdownLabelListView.prototype.filter = function(query) {
      var child, cid, pattern, _ref16;
      pattern = new RegExp('.*' + query.split('').join('.*') + '.*', 'i');
      _ref16 = this.children;
      for (cid in _ref16) {
        child = _ref16[cid];
        child.$el.toggleClass('visible', pattern.test(child.model.get('name')));
      }
      if (query !== '') {
        this.createLabelButton.text("Create label '" + query + "'");
        return this.createLabelButton.show();
      } else {
        return this.createLabelButton.hide();
      }
    };

    DropdownLabelListView.prototype.isVisible = function() {
      return this.$el.is(':visible');
    };

    DropdownLabelListView.prototype.show = function(parent) {
      var parent_pos,
        _this = this;
      this.filterField.val('');
      this.filter('');
      this.$el.show();
      parent_pos = jQuery(parent).offsetTo(this.el.parentNode);
      this.$el.css({
        top: parent_pos.top + jQuery(parent).height() + 12,
        left: parent_pos.left + jQuery(parent).width() / 2 - this.$el.width() / 2
      });
      return defer(function() {
        return _this.filterField.focus();
      });
    };

    DropdownLabelListView.prototype.hide = function() {
      this.$el.hide();
      return this.selected.save();
    };

    DropdownLabelListView.prototype.toggle = function(parent) {
      if (this.isVisible()) {
        return this.hide();
      } else {
        return this.show(parent);
      }
    };

    return DropdownLabelListView;

  })(Backbone.CollectionView);

  LabelContextMenu = (function(_super) {
    __extends(LabelContextMenu, _super);

    function LabelContextMenu() {
      this.blurCallback = __bind(this.blurCallback, this);
      _ref16 = LabelContextMenu.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    LabelContextMenu.prototype.events = {
      'change input[name=label-colour]': function(evt) {
        return this.model.save({
          colour: evt.target.value
        });
      },
      'click .rename-label-button': function(evt) {
        var name;
        evt.preventDefault();
        if (name = prompt('Label name', this.model.get('name'))) {
          this.model.save({
            name: name
          });
        }
        return this.hide();
      },
      'click .delete-label-button': function(evt) {
        evt.preventDefault();
        if (confirm("Do you want to delete the label '" + (this.model.get('name')) + "'?")) {
          this.model.destroy();
        }
        return this.hide();
      }
    };

    LabelContextMenu.prototype.template = '\
		<div class="popover bottom label-context-menu">\
			<div class="arrow"></div>\
			<div class="popover-content">\
				<div class="label-colour">\
					<input type="radio" name="label-colour" value="#7bd148" id="label-colour-7bd148">\
					<label for="label-colour-7bd148" style="background-color: #7bd148">Green</label>\
					\
					<input type="radio" name="label-colour" value="#5484ed" id="label-colour-5484ed">\
					<label for="label-colour-5484ed" style="background-color: #5484ed">Bold blue</label>\
					\
					<input type="radio" name="label-colour" value="#a4bdfc" id="label-colour-a4bdfc">\
					<label for="label-colour-a4bdfc" style="background-color: #a4bdfc">Blue</label>\
					\
					<input type="radio" name="label-colour" value="#46d6db" id="label-colour-46d6db">\
					<label for="label-colour-46d6db" style="background-color: #46d6db">Turquoise</label>\
					\
					<input type="radio" name="label-colour" value="#7ae7bf" id="label-colour-7ae7bf">\
					<label for="label-colour-7ae7bf" style="background-color: #7ae7bf">Light green</label>\
					\
					<input type="radio" name="label-colour" value="#51b749" id="label-colour-51b749">\
					<label for="label-colour-51b749" style="background-color: #51b749">Bold green</label>\
					\
					<input type="radio" name="label-colour" value="#fbd75b" id="label-colour-fbd75b">\
					<label for="label-colour-fbd75b" style="background-color: #fbd75b">Yellow</label>\
					\
					<input type="radio" name="label-colour" value="#ffb878" id="label-colour-ffb878">\
					<label for="label-colour-ffb878" style="background-color: #ffb878">Orange</label>\
					\
					<input type="radio" name="label-colour" value="#ff887c" id="label-colour-ff887c">\
					<label for="label-colour-ff887c" style="background-color: #ff887c">Red</label>\
					\
					<input type="radio" name="label-colour" value="#dc2127" id="label-colour-dc2127">\
					<label for="label-colour-dc2127" style="background-color: #dc2127">Bold red</label>\
					\
					<input type="radio" name="label-colour" value="#dbadff" id="label-colour-dbadff">\
					<label for="label-colour-dbadff" style="background-color: #dbadff">Purple</label>\
					\
					<input type="radio" name="label-colour" value="#e1e1e1" id="label-colour-e1e1e1">\
					<label for="label-colour-e1e1e1" style="background-color: #e1e1e1">Gray</label>\
				</div>\
				<ul class="menu">\
					<li><a href="#" class="rename-label-button">Rename Label…</a></li>\
					<li><a href="#" class="delete-label-button">Delete Label…</a></li>\
				</ul>\
			</div>\
		</div>';

    LabelContextMenu.prototype.initialize = function(options) {
      this.setElement(jQuery(this.template).get(0));
      this.$el.hide();
      jQuery(document.body).append(this.el);
      return jQuery(document.body).on('click', this.blurCallback);
    };

    LabelContextMenu.prototype.render = function() {
      var current_colour;
      current_colour = this.model.get('colour');
      return this.$el.find('input[name=label-colour]').each(function() {
        return !(this.checked = this.value === current_colour);
      });
    };

    LabelContextMenu.prototype.isVisible = function() {
      return this.$el.is(':visible');
    };

    LabelContextMenu.prototype.show = function(parent) {
      var parent_pos;
      this.trigger = parent;
      this.$el.show();
      parent_pos = jQuery(parent).offset();
      return this.$el.css({
        top: parent_pos.top + jQuery(parent).height() + 12,
        left: parent_pos.left + jQuery(parent).width() / 2 - this.$el.width() / 2
      });
    };

    LabelContextMenu.prototype.hide = function() {
      return this.remove();
    };

    LabelContextMenu.prototype.remove = function() {
      jQuery(document).off('click', this.blurCallback);
      return LabelContextMenu.__super__.remove.call(this);
    };

    LabelContextMenu.prototype.blurCallback = function(evt) {
      if (!this.isVisible()) {
        return;
      }
      if (jQuery(evt.target).isOrIsChildOf(this.el)) {
        return;
      }
      if (jQuery(evt.target).isOrIsChildOf(this.trigger)) {

      } else {
        return this.hide();
      }
    };

    return LabelContextMenu;

  })(Backbone.View);

  app = null;

  jQuery.fn.serializeObject = function() {
    var data;
    data = {};
    jQuery(jQuery(this).serializeArray()).each(function(i, pair) {
      return data[pair.name] = pair.value;
    });
    return data;
  };

  jQuery.fn.offsetTo = function(parent) {
    var el, p, position;
    el = jQuery(this);
    position = {
      top: 0,
      left: 0
    };
    while (el.length && (el.get(0)) !== parent) {
      p = el.position();
      position.top += p.top;
      position.left += p.left;
      el = el.parent();
    }
    return position;
  };

  jQuery.fn.isOrIsChildOf = function(parent) {
    var el;
    el = jQuery(this);
    while (true) {
      if ((el.get(0)) === parent) {
        return true;
      }
      el = el.parent();
      if (!el.length) {
        return false;
      }
    }
  };

  jQuery(document).ajaxStart(function() {
    return NProgress.start();
  });

  jQuery(document).ajaxStop(function() {
    return NProgress.done();
  });

  Backbone.Model.prototype.strip = function(attribute) {
    return jQuery("<p>" + (this.get(attribute)) + "</p>").wrap('p').text();
  };

  Backbone.Collection.prototype.containsWhere = function(attributes) {
    return this.findWhere(attributes !== null);
  };

  defer = function(fn) {
    return setTimeout(fn, 1);
  };

  loadPopup = function(url) {
    var catchEscapeKey, hide, overlay;
    overlay = jQuery('<div class="overlay hidden"></div>');
    catchEscapeKey = function(evt) {
      if (evt.keyCode === 27) {
        evt.preventDefault();
        evt.stopPropagation();
        return hide();
      }
    };
    hide = function() {
      overlay.addClass('hidden');
      jQuery(document).off('keyup', catchEscapeKey);
      return setTimeout((function() {
        return overlay.remove();
      }), 500);
    };
    overlay.click(function(evt) {
      if (evt.target === overlay.get(0)) {
        return hide();
      }
    });
    jQuery(document).on('keyup', catchEscapeKey);
    jQuery(document.body).append(overlay);
    return jQuery.ajax({
      url: url,
      success: function(response) {
        var closeButton, panel;
        panel = jQuery(response).filter('.panel');
        panel.addClass('popup');
        closeButton = panel.find('.panel-title').append('<button type="button" class="close" data-dismiss="popup">&times;</button>');
        closeButton.click(hide);
        panel.find('a[href]').attr('rel', 'external');
        overlay.append(panel);
        return defer(function() {
          return overlay.removeClass('hidden');
        });
      }
    });
  };

  Panel = (function() {
    function Panel(el) {
      _.extend(this, Backbone.Events);
      this.$el = jQuery(el);
    }

    Panel.prototype.render = function(view) {
      var _this = this;
      this.clear();
      this.view = view;
      this.view.render();
      this.view.$el.appendTo(this.$el);
      this.trigger('render', this.view);
      return defer(function() {
        return _this.$el.addClass('visible');
      });
    };

    Panel.prototype.clear = function() {
      if (this.view != null) {
        this.view.remove();
        return this.view = null;
      }
    };

    Panel.prototype.hide = function() {
      var _this = this;
      if (!this.isVisible()) {
        return;
      }
      this.trigger('hide', this.view);
      this.$el.removeClass('visible');
      return setTimeout((function() {
        return _this.clear;
      }), 500);
    };

    Panel.prototype.isVisible = function() {
      return this.$el.hasClass('visible');
    };

    return Panel;

  })();

  OverlayPanel = (function(_super) {
    __extends(OverlayPanel, _super);

    function OverlayPanel(el) {
      var _this = this;
      OverlayPanel.__super__.constructor.call(this, el);
      this.$el.on('click', function(evt) {
        if (evt.target === _this.$el.get(0)) {
          return _this.hide();
        }
      });
      jQuery(document).on('keyup', function(evt) {
        if (evt.keyCode === 27 && _this.isVisible()) {
          evt.stopPropagation();
          evt.preventDefault();
          return _this.hide();
        }
      });
    }

    return OverlayPanel;

  })(Panel);

  AppRouter = (function(_super) {
    __extends(AppRouter, _super);

    function AppRouter() {
      _ref17 = AppRouter.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    AppRouter.prototype.initialize = function(config) {
      var setTitle,
        _this = this;
      window.app = this;
      this.route('', function() {
        return this.navigate('/todo', true);
      });
      this.route(/^issues\/new$/, 'newIssue');
      this.route(/^issues\/(\d+)$/, 'showIssue');
      this.route(/^labels\/([^\/]+)$/, 'listIssuesWithLabel');
      this.route(/^todo$/, 'listTodoIssues');
      this.route(/^archive$/, 'listAllIssues');
      this.user = config.user;
      this.labelCollection = new LabelCollection(config.labels);
      this.issueCollection = new IssueCollection(config.issues, {
        parse: true
      });
      this.issueCollection.url = '/api/issues';
      this.todoCollection = this.issueCollection.subcollection({
        filter: function(issue) {
          return !issue.get('completed');
        }
      });
      this.todoCollection.url = '/api/issues/todo';
      this.listPanel = new Panel('#list-panel');
      this.detailPanel = new OverlayPanel('#detail-panel');
      this.labelListView = new Backbone.CollectionView({
        childView: LabelListItemView,
        model: this.labelCollection,
        el: jQuery('#label-panel .label-list').get(0)
      });
      this.labelListView.render();
      this.listTodoIssues();
      setTitle = function(view) {
        return window.document.title = "" + (view.title()) + " – Issues";
      };
      this.listPanel.on('render', setTitle);
      this.detailPanel.on('render', setTitle);
      this.listPanel.on('render', function() {
        return _this.detailPanel.hide();
      });
      return this.detailPanel.on('hide', function() {
        app.navigate(_this.listPanel.view.url);
        return setTitle(_this.listPanel.view);
      });
    };

    AppRouter.prototype.listTodoIssues = function() {
      var view;
      this.todoCollection.fetch();
      view = new IssueListView({
        model: this.todoCollection
      });
      view.url = '/todo';
      view.title = function() {
        return 'Todo';
      };
      return this.listPanel.render(view);
    };

    AppRouter.prototype.listAllIssues = function() {
      var view;
      this.issueCollection.fetch();
      view = new IssueListView({
        model: this.issueCollection
      });
      view.url = '/archive';
      view.title = function() {
        return 'Archive';
      };
      return this.listPanel.render(view);
    };

    AppRouter.prototype.listIssuesWithLabel = function(name) {
      var collection, label, view;
      label = this.labelCollection.findWhere({
        name: name
      });
      collection = this.issueCollection.subcollection({
        filter: function(issue) {
          return issue.labels.containsWhere({
            id: label.get('id')
          });
        }
      });
      collection.url = "/api/labels/" + (label.get('id'));
      collection.fetch();
      view = new IssueListView({
        model: collection
      });
      view.url = '/labels/' + encodeURIComponent(name);
      view.title = function() {
        return name;
      };
      return this.listPanel.render(view);
    };

    AppRouter.prototype.newIssue = function() {
      var view;
      view = new NewIssueView({
        model: this.issueCollection
      });
      view.url = '/issues/new';
      return this.detailPanel.render(view);
    };

    AppRouter.prototype.showIssue = function(id) {
      var issue;
      issue = this.issueCollection.get(id);
      if (!issue) {
        issue = new Issue({
          id: id
        });
        issue.fetch();
      }
      this.detailPanel.render(new IssueView({
        model: issue
      }));
      return issue.mark_read();
    };

    return AppRouter;

  })(Backbone.Router);

  window.init = function(data) {
    app = new AppRouter({
      user: data.user,
      issues: data.issues,
      labels: data.labels
    });
    jQuery('#new-issue-panel').hide();
    jQuery('#issue-details-panel').hide();
    Backbone.history.start({
      pushState: true
    });
    jQuery(document.body).on('click', 'a', function(evt) {
      if (jQuery(this).attr('rel') === 'external') {
        return;
      }
      if (jQuery(this).attr('rel') === 'popup') {
        evt.preventDefault();
        return loadPopup(jQuery(this).attr('href'));
      }
      evt.preventDefault();
      return app.navigate(jQuery(this).attr('href'), true);
    });
    return app;
  };

}).call(this);
